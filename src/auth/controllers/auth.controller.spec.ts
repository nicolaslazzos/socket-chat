import { Test } from '@nestjs/testing';
import { AuthCredentialsDto } from '../dtos/auth-credentials.dto';
import { AuthService } from '../services/auth.service';
import { accessTokenStub } from '../test/access-token.stub';
import { userStub } from '../test/user.stub';
import { AuthController } from './auth.controller';

jest.mock('../services/auth.service');

describe('AuthController', () => {
  let authController: AuthController;
  let authService: AuthService;

  beforeEach(async () => {
    const moduleRef = await Test.createTestingModule({
      controllers: [AuthController],
      providers: [AuthService],
    }).compile();

    authController = moduleRef.get<AuthController>(AuthController);
    authService = moduleRef.get<AuthService>(AuthService);

    jest.clearAllMocks();
  });

  describe('signUp', () => {
    it('should return the user created by the service', async () => {
      const user = userStub();

      const dto: AuthCredentialsDto = { username: user.username, password: user.password };

      const result = await authController.signUp(dto);

      expect(result).toEqual(user);
      expect(authService.signUp).toHaveBeenCalledWith(dto);
    });
  });

  describe('signIn', () => {
    it('should return the access token generated by the service', async () => {
      const user = userStub();

      const dto: AuthCredentialsDto = { username: user.username, password: user.password };

      const result = await authController.signIn(dto);

      expect(result).toEqual(accessTokenStub());
      expect(authService.signIn).toHaveBeenCalledWith(dto);
    });
  });
});